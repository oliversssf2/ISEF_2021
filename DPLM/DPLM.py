import csv
import os
import math
import matplotlib
import numpy as np
import matplotlib.pyplot as plt


def print_dir():
    print(os.getcwd())
    print("hi")

def _import_parameter(self, file, dest_dict):
    """Import the parameters of the DPLM intance from a csv file and write the paramters into a dictionary

    Args:
        file ([str]): The filename of the csv file containing the parameters of the DPLM:
        The .csv file should contain the name, lenght and mass of each linkages
        in the DPLM. Each line should contain the parameters of one linkage, 
        delimited by ",", in the following format:

        name,length,mass

        Example: 
            name,length,mass
            O1O_1,0.762,0.84734661
            O1O2,0.254,0.29870661
            O3O_3,0.648,0.72422661
            O2O4,0.615,0.67904403

        dest_dict ([dict]): The destination dictionary that stores the parameters
        of the DPLM instance.
    """

    

    with open(file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        line_count = 0
        for row in csv_reader:
            # print(row)
            if line_count == 0:
                print(f'Column names are {", ".join(row)}')
                line_count+=1
            else:
                dest_dict['l_'+row[0].lower()] = float(row[1])
                dest_dict['m_'+row[0].lower()] = float(row[2])
                #dest_dict[row[0].lower()] = [row[1],row[2]]
                #print("name is{}".format(row[0]))
                #print("length is {} and mass is {}".format(row[1], row[2]))
                line_count+=1
        
        dest_dict['l_o1o3'] = dest_dict['l_o2o4'] - 2*dest_dict['l_o1o2']
        dest_dict['m_o2o_2'] = dest_dict['m_o1o_1']   
        dest_dict['m_o4o_4'] = dest_dict['m_o3o_3']
        dest_dict['l_o2o_2'] = dest_dict['l_o1o_1']
        dest_dict['l_o_1o_2'] = dest_dict['l_o1o2']
        dest_dict['l_o4o_4'] = dest_dict['l_o3o_3']
        dest_dict['l_o3o4'] = dest_dict['l_o1o2']
        dest_dict['l_o_3o_4'] = dest_dict['l_o3o4']

        dest_dict['r_o1o_1']= dest_dict['l_o1o_1']/2
        dest_dict['alpha_o1o_1']= 0
        dest_dict['r_o2o_2']= dest_dict['l_o2o_2']/2
        dest_dict['alpha_o2o_2']= 0
        dest_dict['r_o3o_3']= dest_dict['l_o3o_3']/2
        dest_dict['alpha_o3o_3']= 0
        dest_dict['r_o4o_4']= dest_dict['l_o4o_4']/2
        dest_dict['alpha_o4o_4']= 0
        dest_dict['r_o_1o_2']= dest_dict['l_o_1o_2']/2
        dest_dict['alpha_o_1o_2']= 0
        dest_dict['r_o2o4']= dest_dict['l_o2o4']/2
        dest_dict['alpha_o2o4']= 0
                                                                            
def _calculate_moment(self, inst_pos, spring_constant, spring_init_len, angle):
    """Calculate the moment generated by a spring on the base hinge of the dplm instance.

    Args:
        inst_pos (float): The installation position of a spring in meter, currently using the value
        of o1p1 - o2p2.

        spring_constant (float): Spring constant in N/m.
        spring_init_len (float): the initial (unextended) length of spring
        angle (float): The current angle of the dplm instance in degree. 
    """

    #calculate the coordinates all the points on the dplm
    o_4x = 0.0
    o_4y = 0.0
    o3x = self.dplm_config['l_o3o_3']*math.cos(math.radians(angle))
    o3y = self.dplm_config['l_o_3o_4'] + self.dplm_config['l_o3o_3']*math.sin(math.radians(angle))
    o_3x = 0.0
    o_3y = self.dplm_config['l_o_3o_4']
    o4x = -self.dplm_config['l_o4o_4']*math.cos(math.radians(angle))
    o4y = self.dplm_config['l_o4o_4']*math.sin(math.radians(angle))
    o1x = o3x
    o1y = o3y + self.dplm_config['l_o1o3']
    o2x = o1x
    o2y = o1y + self.dplm_config['l_o1o2']
    o_1x = o1x + self.dplm_config['l_o1o_1']*math.cos(math.radians(angle))
    o_1y = o1y + self.dplm_config['l_o1o_1']*math.sin(math.radians(angle))
    o_2x = o_1x
    o_2y = o_1y+self.dplm_config['l_o1o2']

    #calculate the coordinate of the COMs of the linkages
    #the prefix m_ stands for COM
    m_o1o_1y = o1y + self.dplm_config['r_o1o_1'] * math.sin(math.radians(self.dplm_config['alpha_o1o_1'] + angle))
    m_o1o_1x = o1x + self.dplm_config['r_o1o_1'] * math.cos(math.radians(self.dplm_config['alpha_o1o_1'] + angle))


    m_o2o_2x = o2x + self.dplm_config['r_o2o_2'] * math.cos(math.radians(self.dplm_config['alpha_o2o_2'] + angle))
    m_o2o_2y = o2y + self.dplm_config['r_o2o_2'] * math.sin(math.radians(self.dplm_config['alpha_o2o_2'] + angle))

    m_o3o_3x = o3x - self.dplm_config['r_o3o_3'] * math.cos(math.radians(self.dplm_config['alpha_o3o_3'] + angle))
    m_o3o_3y = o3y + self.dplm_config['r_o3o_3'] * math.sin(math.radians(self.dplm_config['alpha_o3o_3'] + angle))

    m_o4o_4x = o4x - self.dplm_config['r_o4o_4'] * math.cos(math.radians(self.dplm_config['alpha_o4o_4'] + angle))
    m_o4o_4y = o4y + self.dplm_config['r_o4o_4'] * math.sin(math.radians(self.dplm_config['alpha_o4o_4'] + angle))

    m_o_1o_2x = o2x + self.dplm_config['r_o_1o_2'] * math.sin(math.radians(self.dplm_config['alpha_o_1o_2']))
    m_o_1o_2y = o2y - self.dplm_config['r_o_1o_2'] * math.cos(math.radians(self.dplm_config['alpha_o_1o_2']))

    m_o2o4x = o2x - self.dplm_config['r_o2o4'] * math.sin(math.radians(self.dplm_config['alpha_o2o4']))
    m_o2o4y = o2y - self.dplm_config['r_o2o4'] * math.cos(math.radians(self.dplm_config['alpha_o2o4']))
    
    if inst_pos >= 0:
        p1x = o_1x
        p1y = o_1y
        p2x = o2x + (self.dplm_config['l_o2o_2']-inst_pos)*math.cos(math.radians(angle))
        p2y = o2y + (self.dplm_config['l_o2o_2']-inst_pos)*math.sin(math.radians(angle))
    else:
        p1x = o_1x 
        p1y = o_1y
        p2x = o2x + ((-inst_pos)*math.cos(math.radians(angle)))
        p2y = o2y + ((-inst_pos))*math.sin(math.radians(angle))
    

    v_p2p1 = [p1x - p2x, p1y - p2y]
    v_o1o_1 = [o_1x-o1x, o_1y-o1y]
    l_p1p2 = np.linalg.norm(v_p2p1)

    phi = math.degrees(math.acos(np.dot(v_p2p1, v_o1o_1)/l_p1p2*self.dplm_config['l_o1o_1']))

    x_o1o_1 = m_o1o_1x - o1x
    x_o2o_2 = m_o2o_2x - o2x
    x_o3o_3 = o_3x - m_o3o_3x
    x_o4o_4 = o_4x - m_o4o_4x
    x_o2o4 = o2x - m_o2o4x
    x_o_1o_2 = m_o_1o_2x - o_2x
    
    M_g = self.g * (self.dplm_config['m_o2o_2']*x_o2o_2 + self.dplm_config['m_o1o_1'] * x_o1o_1\
        + self.dplm_config['m_o_1o_2']*self.dplm_config['l_o1o_1'] * math.cos(math.radians(angle)) \
        + self.dplm_config['m_o3o_3'] * x_o3o_3 + self.dplm_config['m_o4o_4'] * x_o4o_4 + \
        + (self.dplm_config['m_o_1o_2'] + self.dplm_config['m_o2o_2'] + self.dplm_config['m_o1o_1']\
        + self.dplm_config['m_o2o4']) * self.dplm_config['l_o3o_3'] * math.cos(math.radians(angle)))

    extended_len = l_p1p2-spring_init_len
    if extended_len<0:
        extended_len = 0
    M_i = extended_len*math.sin(phi)*inst_pos*spring_constant
    M_total = M_i - M_g

    return M_i, M_g, M_total

def RMSE():
    pass
class DPLM:
    """
    A class used to represent a DPLM (Double parallelogram mechanism).
    This class stores the parameters and the current state of a DPLM instance.
    All the calculation of a DPLM instance is performed within this class

    
    Attributes:
    dplm_config -- dict -- a dictionary containing the configuration (name, length, and mass of linkages) of the DPLM instance.
    spring_positions -- list -- stores the current positions of all the springs installed on the dplm instance
    
    ------------
    """
    g = 9.80665      #constant of gravitational field
    import_parameter = _import_parameter
    calculate_moment = _calculate_moment

    def __init__(self, dplm_config_file):
        self.dplm_config = {}
        self.spring_positions = []
        self.spring_constants = []
        self.import_parameter(dplm_config_file, self.dplm_config)

    def show_dplm_config(self):
        for item in sorted(self.dplm_config.items()):
            print('{}:{}'.format(item[0], item[1]))
            # print("<{}:{}>".format(type(item[0]), type(item[1])))
#Testing code
if __name__ == "__main__":
    dplm = DPLM("/Users/fongsu/git_project/R_Learning_gym/para1.csv")
    k = [dplm.calculate_moment(0.2,0.3,0.2, item)[1] for item in range(-50, 51)]
    print(k)
    dplm.calculate_moment(0.25)
    plt.plot(range(-50,51), k)
    plt.show()
    